import { defineSchema, defineTable } from "convex/server";
import { Validator, v } from "convex/values";

// The users, accounts, sessions and verificationTokens tables are modeled
// from https://authjs.dev/getting-started/adapters#models

export default defineSchema({
  users: defineTable({
    email: v.string(),
    name: v.optional(v.string()),
    emailVerified: v.optional(v.number()),
    image: v.optional(v.string()),
    tokenIdentifier: v.optional(v.string()),
  })
    .index("email", ["email"])
    .index("by_token", ["tokenIdentifier"]),

  accounts: defineTable({
    userId: v.id("users"),
    type: v.union(
      v.literal("email"),
      v.literal("oidc"),
      v.literal("oauth"),
      v.literal("webauthn")
    ),
    provider: v.string(),
    providerAccountId: v.string(),
    refresh_token: v.optional(v.string()),
    access_token: v.optional(v.string()),
    expires_at: v.optional(v.number()),
    token_type: v.optional(v.string()),
    scope: v.optional(v.string()),
    id_token: v.optional(v.string()),
    session_state: v.optional(v.string()),
  })
    .index("providerAndAccountId", ["provider", "providerAccountId"])
    .index("userId", ["userId"]),

  userSettings: defineTable({
    userId: v.id("users"),
    uploadthing_key: v.optional(v.string()),
    tavily_key: v.optional(v.string()),
    userName: v.optional(v.string()),
    userRole: v.optional(v.string()),
    userTraits: v.optional(v.array(v.string())),
    userAdditionalInfo: v.optional(v.string()),
    promptTemplate: v.optional(v.string()),
    mainFont: v.optional(
      v.union(
        v.literal("inter"),
        v.literal("system"),
        v.literal("serif"),
        v.literal("mono"),
        v.literal("roboto-slab")
      )
    ),
    codeFont: v.optional(
      v.union(
        v.literal("fira-code"),
        v.literal("mono"),
        v.literal("consolas"),
        v.literal("jetbrains"),
        v.literal("source-code-pro")
      )
    ),
    sendBehavior: v.optional(
      v.union(v.literal("enter"), v.literal("shiftEnter"), v.literal("button"))
    ),
    autoSave: v.optional(v.boolean()),
    showTimestamps: v.optional(v.boolean()),
    disabledModels: v.optional(v.array(v.string())),
    mem0Enabled: v.optional(v.boolean()),
    observations: v.optional(v.array(v.string())),
  }).index("by_user", ["userId"]),

  apiKeys: defineTable({
    userId: v.id("users"),
    service: v.union(
      v.literal("gemini"),
      v.literal("groq"),
      v.literal("openrouter"),
      v.literal("moonshot"),
      v.literal("deepgram")
    ),
    name: v.string(),
    key: v.string(),
    is_default: v.optional(v.boolean()),
  }).index("by_user_and_service", ["userId", "service"]),

  chats: defineTable({
    userId: v.id("users"),
    title: v.string(),
    createdAt: v.number(),
    updatedAt: v.number(),
    shareId: v.optional(v.string()),
    isShared: v.optional(v.boolean()),
    isGeneratingTitle: v.optional(v.boolean()),
    isBranch: v.optional(v.boolean()),
    isPinned: v.optional(v.boolean()),
  })
    .index("by_user", ["userId"])
    .index("by_share_id", ["shareId"]),

  messages: defineTable({
    chatId: v.id("chats"),
    role: v.union(v.literal("user"), v.literal("assistant")),
    content: v.string(),
    modelId: v.optional(v.string()),
    thinking: v.optional(v.string()),
    thinkingDuration: v.optional(v.number()),
    isComplete: v.optional(v.boolean()),
    isCancelled: v.optional(v.boolean()),
    attachments: v.optional(
      v.array(
        v.object({
          name: v.string(),
          type: v.string(),
          size: v.number(),
          url: v.string(),
        })
      )
    ),
    toolCalls: v.optional(
      v.array(
        v.object({
          toolCallId: v.string(),
          toolName: v.string(),
          args: v.any(),
          result: v.optional(v.any()),
        })
      )
    ),
    createdAt: v.number(),
  })
    .index("by_chat", ["chatId"])
    .index("by_chat_created", ["chatId", "createdAt"]),

  // Table to store deep research reports generated by users
  researchReports: defineTable({
    userId: v.id("users"),
    prompt: v.string(),
    pdfKey: v.string(), // Key returned by UploadThing
    pdfUrl: v.string(), // Public URL to access the PDF
    createdAt: v.number(),
  }).index("by_user", ["userId"]),
  aiImages: defineTable({
    userId: v.id("users"),
    prompt: v.string(),
    imageUrl: v.string(),
    createdAt: v.number(),
  }).index("by_user", ["userId"]),
  numbers: defineTable({ value: v.number() }),
  sessions: defineTable({
    userId: v.string(),
    expires: v.number(),
    sessionToken: v.string(),
    userAgent: v.optional(v.string()),
    ipAddress: v.optional(v.string()),
    platform: v.optional(v.string()),
    createdAt: v.optional(v.number()),
  })
    .index("sessionToken", ["sessionToken"])
    .index("userId", ["userId"]),
  verificationTokens: defineTable({
    identifier: v.string(),
    token: v.string(),
    expires: v.number(),
  }).index("identifierToken", ["identifier", "token"]),

  authenticators: defineTable({
    credentialID: v.string(),
    userId: v.id("users"),
    providerAccountId: v.string(),
    credentialPublicKey: v.string(),
    counter: v.number(),
    credentialDeviceType: v.string(),
    credentialBackedUp: v.boolean(),
    transports: v.optional(v.string()),
  })
    .index("userId", ["userId"])
    .index("credentialID", ["credentialID"]),

  todos: defineTable({
    text: v.string(),
    completed: v.boolean(),
  }),

  // Research functionality tables
  research_sessions: defineTable({
    userId: v.string(),
    prompt: v.string(),
    thoughts: v.string(),
    status: v.union(
      v.literal("running"),
      v.literal("completed"),
      v.literal("failed")
    ),
    summary: v.optional(v.string()),
    actions: v.array(
      v.object({
        type: v.union(v.literal("search"), v.literal("read")),
        toolCallId: v.string(),
        thoughts: v.string(),
        query: v.optional(v.string()),
        url: v.optional(v.string()),
        timestamp: v.number(),
      })
    ),
    createdAt: v.number(),
    completedAt: v.optional(v.number()),
  }).index("by_user", ["userId"]),

  user_usage: defineTable({
    userId: v.string(),
    research: v.optional(v.number()),
  }).index("by_user", ["userId"]),
  messageUsage: defineTable({
    userId: v.optional(v.id("users")),
    tokenIdentifier: v.optional(v.string()),
    anonKey: v.optional(v.string()),
    count: v.number(),
    windowStart: v.number(),
    lastUpdated: v.number(),
  })
    .index("by_user", ["userId"])
    .index("by_token", ["tokenIdentifier"])
    .index("by_anon", ["anonKey"]),

  magicLinkTokens: defineTable({
    email: v.string(),
    token: v.string(),
    expiresAt: v.number(),
    callbackURL: v.string(),
    createdAt: v.number(),
  })
    .index("email", ["email"])
    .index("token", ["token"])
    .index("expiresAt", ["expiresAt"]),
});
